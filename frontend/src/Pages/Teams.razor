@using System.Net.Http.Json;
@using src.Components.UI.category_filter
@using src.Components.UI.search
@using src.Components.UI.team_card
@using src.DTO.teams

@inject HttpClient Http

@page "/teams"

<PageTitle>Teams</PageTitle>
<NavMenu></NavMenu>
<main class="main">
	<section class="category-container">
		<CategoryFilter category=@static_teams_list.Where(t => t.Pilots.Count > 0).Select(t => t.Team).ToList() OnCategorySelected=UpdateByFilter isClicked=@desative_selection />
	</section>
	<section class="search-container">
		<Search search_text=UpdateSearch />
	</section>
	<section class="table-container">
		<ul class="teams-table">
			@foreach (TeamsDto team in teams)
			{
				<li class="team">
					<TeamCard Teams=team />
				</li>
			}
		</ul>
	</section>
</main>

@code {
	public List<TeamsDto> teams = new List<TeamsDto>();
	public String Filter_Opt = string.Empty;
	public List<TeamsDto> static_teams_list;
	public String? Last_Selected = null;
	public bool desative_selection = false;
	private String Search;

	protected override async Task OnInitializedAsync()
	{
		teams = await Http.GetFromJsonAsync<List<TeamsDto>>("http://localhost:5076/teams");
		static_teams_list = teams;
	}

	public async Task UpdateByFilter(String filter_opt)
	{
		// Alterna a seleção do filtro
		if (Filter_Opt == filter_opt)
		{
			Filter_Opt = "";
			filter_opt = "";
		}
		else
		{
			Filter_Opt = filter_opt;
		}

		NewFilters(filter_opt);
	}

	public async Task NewFilters(String search)
	{
		try
		{
			// Busca times com base no filtro
			teams = await Http.GetFromJsonAsync<List<TeamsDto>>($"http://localhost:5076/teams?search={search}");
			StateHasChanged();
		}
		catch (Exception er)
		{
			Console.WriteLine(er);
		}
	}

	public async Task UpdateSearch(String value)
	{
		// Lida com a busca por texto
		var search_filter = value;
		await NewFilters(value);
	}
}

