@using System.Net.Http.Json;
@using src.Common.Enums.Pilot
@using src.Common.Filter
@using src.Components.UI.category_filter
@using src.Components.UI.filter_op
@using src.Components.UI.pilot_table;
@using src.Components.UI.search
@using src.DTO.pilot;
@using src.DTO.teams;

@inject HttpClient Http

@page "/ranking"


<PageTitle>Ranking</PageTitle>
<NavMenu></NavMenu>
@if (@_pilotsList != null) {

	<main class="main">

		<section class="center">
			<div class="category">
				<CategoryFilter category=@_categories OnCategorySelected="OnCategorySelected" />
			</div>
			<div class="filter">
				<Search search_text=UpdateSearch />
				<div class="filter-menu">
					<FilterOp options=@options_filters filters="NewFilters" />
				</div>
			</div>
			@if (_viewPilotList != null)
			{
				<PilotTable data=@_viewPilotList />
			}
			else
			{
				<p> Carregando dados..</p>
			}
		</section>
	</main>
}
else
{
	<p>Carregando filtros...</p>
}



@code {
	private List<CategoryPilotsDto> _pilotsList;
	private List<TeamsDto> _teamsList;

	private List<String> _categories;
	private List<PilotItems>? _viewPilotList = null;

	private String SelectedCategory;
	private List<String> Nacionalidades;

	private String Search;

	private Dictionary<String, String> filters = new();

	private Dictionary<String, List<String>> options_filters;

	private async Task OnCategorySelected(string clickedText)
	{
		SelectedCategory = clickedText;
		SetViewList(_pilotsList, SelectedCategory);
		Console.WriteLine(SelectedCategory);
	}

	private void SetViewList(List<CategoryPilotsDto> pilotsList, string category)
	{

		_viewPilotList = pilotsList.Where(c => c.category == category).SelectMany(c => c.pilotDTOs).ToList();
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_pilotsList = await Http.GetFromJsonAsync<List<CategoryPilotsDto>>($"http://localhost:5076/pilots");

			_categories = _pilotsList.Select(c => c.category).ToList();
			SetViewList(_pilotsList, _categories[0]);

			options_filters = new()
			{ {"Nationality", _pilotsList.SelectMany(p => p.pilotDTOs.Select(p => p.Nationality).Distinct()).ToList()},
			  {"Gender", _pilotsList.SelectMany(p => p.pilotDTOs.Select(p => ((Gender)p.Gender).ToString())).Distinct().ToList()},
			  {"Circuit", _pilotsList.SelectMany(p => p.pilotDTOs.Select(p => p.Circuit)).Distinct().ToList()},
			  {"Weight", ["Light", "Medium", "Heavy"]}
			};

		}
		catch(Exception er)
		{
			Console.WriteLine(er);
		}
	}

	public async Task NewFilters(Dictionary<String, String>? filtersSelected)
	{
		try
		{
			var query = String.Join("&", filtersSelected.Select(f => $"{f.Key.ToLower()}={f.Value}"));

			_pilotsList = await Http.GetFromJsonAsync<List<CategoryPilotsDto>>($"http://localhost:5076/pilots?{query}");

			_categories = _pilotsList.Select(c => c.category).ToList();
			SetViewList(_pilotsList, _categories.FirstOrDefault());

			StateHasChanged();
		}
		catch (Exception er)
		{
			Console.WriteLine(er);
		}
	}

	public async Task UpdateSearch(String value)
	{

		var search_filter = new Dictionary<String, String> { { "search", value } };
		await NewFilters(search_filter);
	}
}
