
@using src.DTO.pilot



<div class="pilot-container" >
	<section class="copilot-item" @onclick="Toggle">
		<div class="info-container">
				<div class="general-info">
					<div class="flag">
					<img src="@GetFlagPath(pilot.Nationality)" alt="@pilot.Nationality" class="flag-img" />
				</div>
				<div class="info">

					<div class="origin">
						@pilot.Nationality
					</div>
					<div class="name">
						@pilot.Name
					</div>
				</div>
			</div>
		</div>
		<div class="more">
			<div class="category">
				@pilot.Category
			</div>
			<i class="fas fa-chevron-down arrow @ArrowClass"></i>
		</div>
	</section>
	@if (isExpanded)
	{
		<section class="container">
			<div class="time">
				<div class="title">
					<p>Time</p>
				</div>
				<p class="text">
					@pilot.Fastestlap
				</p>
			</div>

			<div class="details">
				<div>
					@pilot.Gender
				</div>
				<div>
					@pilot.Weight.ToString("f2") kg
				</div>
				<div>
					@pilot.Circuit
				</div>
				<div>
					@pilot.Category
				</div>
			</div>
		</section>
	}

	
</div>

@code {

	[Parameter]
	public PilotItems pilot { get; set; }


	// Altera a classe do icon de acordo com o valor de isExpanded
	private string ArrowClass => isExpanded ? "rotate" : "";

	public bool isExpanded = false;

	// Ao clicar no icone, a variavel isExpanded é mudada e os detalhes do jogador é mostrado
	private void Toggle()
	{
		isExpanded = !isExpanded;
	}

	private string GetFlagPath(string nationality)
	{
		// Seleciona a bandeira pela pasta flags usando a nacionalidade do piloto. 
		// Não é o modo ideal mas funciona em pequena escala
		return $"/Flags/{nationality}.svg";
	}



}
