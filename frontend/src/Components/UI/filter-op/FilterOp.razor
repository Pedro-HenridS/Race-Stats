@using src.Common
@using src.Common.Enums.Pilot
@using src.Common.Filter

<div class="container">
    <div class="op">
        
        @if (filterIsClicked)
        {
            @foreach (var option in options)
            {
                <div class="wrapper">
                    <button class="option @(expandedOptions.ContainsKey(option.Key) && expandedOptions[option.Key] ? "clicked" : "isntClicked")"
                            @onclick="() => OnOptClicked(option.Key)">
                        @option.Key
                        <div class="arrow-container">
                            <i class="fas fa-chevron-down arrow @(expandedOptions.ContainsKey(option.Key) && expandedOptions[option.Key] ? "ArrowClass" : "")"></i>
                        </div>
                    </button>
                    <ul class="options-dropdown @(expandedOptions.ContainsKey(option.Key) && expandedOptions[option.Key] ? "showDropDown" : "hideDropDown")">
                        @foreach (string opt in option.Value)
                        {
                            <li @onclick="() => OnFilterOptionClicked(option.Key, opt)" class="@(
                                                                                        filters_selecteds.Any(d => d.ContainsKey(option.Key)) &&
                                                                                        filters_selecteds.Any(d => d.ContainsValue(opt)) ? "selected" : "noSelected")">
                    @opt
                            </li>
                        }
                    </ul>
                </div>
            }
        }
        <button class="btn-icon" @onclick=IsFilterClicked>
            <i class="fas fa-filter"></i>
        </button>
    </div>
</div>

@code {
    public List<Dictionary<string, string>> filters_selecteds = new();

    [Parameter]
    public EventCallback<Dictionary<string, string>> filters { get; set; }

    [Parameter]
    public Dictionary<string, List<string>> options { get; set; }

    public Dictionary<string, string>? selectedFilters { get; set; } = new();

    public Dictionary<string, bool> expandedOptions { get; set; } = new();


    private bool filterIsClicked = false;
    private void IsFilterClicked()
    {
        filterIsClicked = !filterIsClicked;
    }


    private void OnOptClicked(string key)
    {
        if (expandedOptions.ContainsKey(key))
        {
            expandedOptions[key] = !expandedOptions[key];
        }
        else
        {
            expandedOptions[key] = true;
        }

        StateHasChanged();
    }

    public async Task OnFilterOptionClicked(string key, string opt)
    {
        if (selectedFilters.TryGetValue(key, out var currentValue) && currentValue == opt)
        {
            // Clique na mesma opção → remove filtro
            OnOptClicked(key);
            selectedFilters.Remove(key);

            filters_selecteds.RemoveAll(d => d.ContainsKey(key));
        }
        else
        {
            // Seleção de nova opção
            OnOptClicked(key);
            selectedFilters[key] = opt;

            if (filters_selecteds.Any(d => d.ContainsKey(key)))
            {
                var filter = filters_selecteds.First(d => d.ContainsKey(key));
                filter[key] = opt;
            }
            else
            {
                filters_selecteds.Add(new Dictionary<string, string> { { key, opt } });
            }
        }

        // Envia os dados pro componente pai
        if (filters.HasDelegate)
            await filters.InvokeAsync(selectedFilters);

        StateHasChanged();
    }
}
