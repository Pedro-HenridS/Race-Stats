@using src.Common
@using src.Common.Enums.Pilot
@using src.Common.Filter
@using src.Components.UI.filter_flag

<div class="container">
    
    <div class="op">
        <FilterFlag filter_option=teste />
        @foreach (var option in options)
        {
            <div class="wrapper">
                <button class="option @(expandedOptions.ContainsKey(option.Key) && expandedOptions[option.Key] ? "clicked" : "isntClicked")"
                        @onclick="() => OnOptClicked(option.Key)">
                    @option.Key
                    <div class="arrow-container">
                        <i class="fas fa-chevron-down arrow @(expandedOptions.ContainsKey(option.Key) && expandedOptions[option.Key] ? "ArrowClass" : "")"></i>
                    </div>
                </button>
                <ul class="options-dropdown @(expandedOptions.ContainsKey(option.Key) && expandedOptions[option.Key] ? "showDropDown" : "hideDropDown")">
                    @foreach (string opt in option.Value)
                    {
                        <li @onclick="() => OnFilterOptionClicked(option.Key, opt)">
                            @opt
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
</div>

@code {
    public Dictionary<String, String> teste = new Dictionary<String, String> { { "dsd", "sdsd" } };

    [Parameter]
    public EventCallback<Dictionary<string, string>> filters { get; set; }

    [Parameter]
    public Dictionary<string, List<string>> options { get; set; }

    public Dictionary<string, string>? selectedFilters { get; set; } = new();

    public Dictionary<string, bool> expandedOptions { get; set; } = new();

    private void OnOptClicked(string opt)
    {
        if (expandedOptions.ContainsKey(opt))
        {
            expandedOptions[opt] = !expandedOptions[opt]; 
        }
        else
        {
            expandedOptions[opt] = true; 
        }
        StateHasChanged();
    }

    public async Task OnFilterOptionClicked(string key, string opt)
    {
        if (selectedFilters.TryGetValue(key, out var currentValue) && currentValue == opt)
        {
            selectedFilters[key] = null;
            Console.WriteLine(selectedFilters[key]);
        }
        else
        {
            selectedFilters[key] = opt;
            Console.WriteLine(selectedFilters[key]);
        }

        if (filters.HasDelegate)
            await filters.InvokeAsync(selectedFilters);
    }
}