@using src.Common
@using src.Common.Enums.Pilot
@using src.Common.Filter

<div class="container">

	<div class="op">
		@foreach (var option in options)
		{
			<div class="wrapper">
				<button class="option @(optSelected.Contains(option.Key) ? "clicked" : "isntClicked")" @onclick="() => OnOptClicked(option.Key)">
					@option.Key
					<div class="arrow-container">
						<i class="fas fa-chevron-down arrow @(optSelected.Contains(option.Key) ? ArrowClass : "")"></i>
					</div>
				</button>
				<ul class="options-dropdown @(optSelected.Contains(option.Key) ? "showDropDown" : "hideDropDown")" >
					@foreach (String opt in option.Value)
					{
						<li class="" @onclick="() => OnFilterOptionClicked(option.Key, opt)">
							@opt
						</li>
					}
				</ul>
			</div>
		}
	</div>
</div>

@code {
	[Parameter]
	public EventCallback<Dictionary<String, String>> filters { get; set; }

	[Parameter]
	public Dictionary<String, List<String>> options { get; set; }

	public Dictionary<String, String>? selectedFilters { get; set; } = new();

	public List<String> optSelected { get; set; } = new List<string>();

	private string ArrowClass => isExpanded ? "ArrowClass" : "";

	public bool isExpanded = false;

	private void Toggle()
	{
		isExpanded = !isExpanded;
	}

	public async Task OnOptClicked(String opt)
	{
		if (optSelected.Contains(opt))
		{
			optSelected.Remove(opt);
			Console.WriteLine(opt);
		}
		else
		{
			Console.WriteLine(opt);
			optSelected.Add(opt);
		}

		Toggle();
		StateHasChanged();

	}

	public async Task OnFilterOptionClicked(string key, string opt)
	{	
		if (selectedFilters.TryGetValue(key, out var currentValue) && currentValue == opt)
		{
			selectedFilters[key] = null;
			Console.WriteLine(selectedFilters[key]);
		}
		else
		{
			selectedFilters[key] = opt;

			Console.WriteLine(selectedFilters[key]);
		}


		if (filters.HasDelegate)
			await filters.InvokeAsync(selectedFilters);
	}
}
